version: 2
jobs:
  build:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker            
      - run:
          name: Building Docker container
          no_output_timeout: 1h
          command: |
              export DOCKER_NAME=myapp
              docker build -t $DOCKER_NAME .
              docker save $DOCKER_NAME -o /tmp/docker_image.tar
      - persist_to_workspace:
          root: /tmp
          paths:
            - docker_image.tar
  test:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - setup_remote_docker            
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies 
          command: |
            apk add --update make wget tree
      - run: 
          name: Load docker image
          no_output_timeout: 1h
          command: |
            docker load -i /tmp/workspace/docker_image.tar
      - run:
          name: Running Tests
          command: |
              export DOCKER_NAME=myapp
              # put tests here
              mkdir dwi_singleshell
              #get and extract tarfile,tar includes two folders: bids/ prepdwi_v0.0.11/
              #with participant incl. bedpost run already
              wget -qO- https://www.dropbox.com/s/fgk0l0mwlwfjifd/dwi_singleshell_with_prepdwi_bedpost.tar.gz  | tar xvz -C dwi_singleshell
              #make dummy container for volume mounts, then copy bids and out to it
              docker create -v /bids -v /out --name testdata alpine:3.4 /bin/true
              docker cp dwi_singleshell/bids testdata:/bids
              docker cp dwi_singleshell/prepdwi_v0.0.11 testdata:/out
              #run the bids app
              docker run --name testapp -it --volumes-from testdata $DOCKER_NAME /bids/bids /out/diffparc-sumo participant --nsamples 10 --in_prepdwi_dir /out/prepdwi_v0.0.11 
              #copy output data from bids app container to our workspace
              docker cp testapp:/out/diffparc-sumo dwi_singleshell
              #put tests here:
              tree dwi_singleshell
              #run group level to get csv
 
  deploy_dev:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - setup_remote_docker            
      - attach_workspace:
          at: /tmp/workspace
      - run: 
          name: Load docker image
          no_output_timeout: 1h
          command: |
            docker load -i /tmp/workspace/docker_image.tar
      - run:
          name: Pushing build to docker hub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            export DOCKER_NAME=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:latest
            # tag and push here:
            docker tag myapp $DOCKER_NAME
            docker push $DOCKER_NAME

  deploy_release:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - setup_remote_docker            
      - attach_workspace:
          at: /tmp/workspace
      - run: 
          name: Load docker image
          no_output_timeout: 1h
          command: |
            docker load -i /tmp/workspace/docker_image.tar
      - run:
          name: Pushing build to docker hub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            export DOCKER_NAME=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:latest
            export DOCKER_RELEASE=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
            # tag and push here:
            docker tag myapp $DOCKER_NAME
            docker tag $DOCKER_NAME $DOCKER_RELEASE
            docker push $DOCKER_RELEASE
            docker push $DOCKER_NAME

  deploy_shub:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker            
      - run:
          name: Pushing latest to singularity hub 
          command: |
            sincecommit=$(git log -1 --date=unix --pretty=format:%cd)
            if [ ! -e Singularity ]; then sinceshub=0; else sinceshub=$(git log -1 --date=unix --pretty=format:%cd Singularity); fi
            if [ "$sincecommit" -gt "$sinceshub" ]; then echo "Commit since last shub build, rebuilding..."; else echo "No commit since last shub build, skipping..."; exit 0; fi
            export DOCKER_NAME=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:latest
            git config --global user.email $GH_EMAIL
            git config --global user.name $GH_NAME
            echo "Bootstrap: docker" > Singularity
            echo "From: $DOCKER_NAME" >> Singularity
            echo "%labels" >> Singularity
            echo "CIRCLE_BUILD_URL $CIRCLE_BUILD_URL" >> Singularity
            git add Singularity
            git commit -m "shub build latest nightly [skip ci]"
            git push -q https://${GITHUB_TOKEN}@github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git

  deploy_release_shub:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker            
      - run:
          name: Pushing release to singularity hub 
          command: |
            export DOCKER_NAME=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
            git config --global user.email $GH_EMAIL
            git config --global user.name $GH_NAME
            echo "Bootstrap: docker" > Singularity.$CIRCLE_TAG
            echo "From: $DOCKER_NAME" >> Singularity.$CIRCLE_TAG
            git add Singularity.$CIRCLE_TAG
            git commit -m "shub build release $CIRCLE_TAG [skip ci]"
            git push -q https://${GITHUB_TOKEN}@github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git HEAD:master

workflows:
  version: 2
  commit:
    jobs: 
      - build:
          context: org-global
          filters:
            tags:
              only: /.*/
      - test:
          requires:
            - build
          context: org-global
          filters:
            tags:
              only: /.*/
      - deploy_dev:
          requires:
            - build
            - test
          filters:
            tags:
              ignore: /^v.*/
          context: org-global
      - deploy_release:
          requires:
            - build
            - test
          context: org-global
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy_release_shub:
          requires:
            - build
            - test
            - deploy_release
          context: org-global
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

  nightly:
    triggers:
      - schedule:
          cron: "0 3 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - deploy_shub:
          context: org-global

