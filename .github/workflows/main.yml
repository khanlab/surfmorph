# Trigger this workflow when push or pull request to master

# require: github secrets
#    DOCKERHUB_USERNAME
#    DOCKERHUB_USERNAME
#    DOCKERHUB_PASSWORD
#    DOCKERHUB_PASSWORD
#    REMOTE_DEPLOY_HOST
#    REMOTE_DEPLOY_USER
#    REMOTE_DEPLOY_SSH_KEY
#    REMOTE_DEPLOY_CONTAINERS_PATH
#      note:REMOTE_DEPLOY_SSH_KEY is private key, the paired public key should be on REMOTE_HOST

name: CI
on: 
  push: 
    branches:
    - master
  pull_request:
    branches:
    - master
jobs:
  test:
    runs-on: ubuntu-18.04
    steps:
      - name: checkout
        uses: actions/checkout@v2
        
      - name: Set image names
        shell: bash
        run: |
          echo ::set-env name=IMG_ORG::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $1}')
          echo ::set-env name=IMG_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')
          echo ::set-env name=IMG_TAG::latest #change this later to set tag based on branch or release tag

      - name: Build Docker image
        run: |
          docker build -t ${IMG_ORG}/${IMG_NAME}:${IMG_TAG} .

      # insert testing here...

      - name: Push Container to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker push ${IMG_ORG}/${IMG_NAME}:${IMG_TAG}

  # we need this job because some hosts (compute canada) are unable to pull large images from docker hub (not enough tmp space, and cannot build on lustre)
  deploy_remote: 
    needs: test
    runs-on: ubuntu-18.04
    steps:

      - name: Set image names
        shell: bash
        run: |
          echo ::set-env name=IMG_ORG::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $1}')
          echo ::set-env name=IMG_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')
          echo ::set-env name=IMG_TAG::latest #change this later to set tag based on branch or release tag


      - name: Check Cache Singularity Install
        id: cache-singularity
        uses: actions/cache@v2
        with:
          path: /opt/singularity
          key: ${{ runner.os }}-singularity

      - name: Install Singularity Dependency Go
        if: steps.cache-singularity.outputs.cache-hit != 'true'
        uses: actions/setup-go@v1
        with:
          go-version: 1.12
        id: go

      - name: Install Singularity Dependencies
        if: steps.cache-singularity.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update && sudo apt-get install -y \
          build-essential \
          libssl-dev \
          uuid-dev \
          libgpgme11-dev \
          squashfs-tools \
          libseccomp-dev \
          pkg-config


      - name: Install Singularity
        if: steps.cache-singularity.outputs.cache-hit != 'true'
        env:
          SINGULARITY_VERSION: 3.2.1
        run: |
          export GOPATH=/tmp/go
          mkdir -p $GOPATH
          sudo mkdir -p /usr/local/var/singularity/mnt && \
          mkdir -p $GOPATH/src/github.com/sylabs && \
          cd $GOPATH/src/github.com/sylabs && \
          wget -qO- https://github.com/sylabs/singularity/releases/download/v${SINGULARITY_VERSION}/singularity-${SINGULARITY_VERSION}.tar.gz | \
          tar xzv && \
          cd singularity && \
          ./mconfig -p /opt/singularity && \
          make -C builddir && \
          sudo make -C builddir install          

      - name: Add Singularity to path
        run: |
           echo "::add-path::/opt/singularity/bin"

      - name: Build Singularity image from docker hub
        run: |
           singularity build ${IMG_ORG}_${IMG_NAME}_${IMG_TAG}.sif  docker://${IMG_ORG}/${IMG_NAME}:${IMG_TAG}

      - name: Deploy singularity image to remote
        run: |
          # setup runner's ssh
          mkdir -p ~/.ssh
          echo "${{ secrets.REMOTE_DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.REMOTE_DEPLOY_HOST }} >> ~/.ssh/known_hosts
          
          scp -v ${IMG_ORG}_${IMG_NAME}_${IMG_TAG}.sif  ${{ secrets.REMOTE_DEPLOY_USER }}@${{ secrets.REMOTE_DEPLOY_HOST }}:${{ secrets.REMOTE_DEPLOY_CONTAINERS_PATH }}



